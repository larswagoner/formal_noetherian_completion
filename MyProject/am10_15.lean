import MyProject.am1_9
import MyProject.am10_4
import MyProject.am10_5
import MyProject.am10_13
import MyProject.AssociatedGradedRing.Ring

/-
  # Proposition 10.15
  Let `A` be a Noetherian ring, and `Â` its `a`-adic completion. Then
  i) `â = Âa ≅ Â ⨂ a`.
  ii) `(aⁿ)^ = (â)ⁿ`.
  iii) `aⁿ/aⁿ⁺¹ ≅ âⁿ/âⁿ⁺¹`.
  iv) `â` is contained in the Jacobson radical of `Â`.
-/

variable {A : Type*} [CommRing A] (I : Ideal A) [IsNoetherianRing A]

/-
  Given an ideal `J ⊆ A`, this gives the ideal `J^ = Â • J` in `Â`.
-/

-- get induced map AdicCompletion I I → AdicCompletion I A (inclusion), show image is I.adicCompletion I

-- Note:
-- Option 1) We take `â` to be the `a`-adic completion of `a`. This makes it an `Â`-module.
-- Option 2) We take `â` to be the ideal in `Â` generated by `a`. This gives it an `Â`-ideal
-- structure. Which one should we use?

noncomputable def am10_15_i_option_1 :
    AdicCompletion I I ≃ₗ[AdicCompletion I A] TensorProduct A (AdicCompletion I A) I :=
  (AdicCompletion.ofTensorProductEquivOfFiniteNoetherian I I).symm

noncomputable def am10_15_i_option_2 : I.adicCompletion I  ≃ₗ[AdicCompletion I A] TensorProduct A (AdicCompletion I A) I := sorry

lemma am10_15_i_option_3 :
  (I.adicCompletion I).toAddSubgroup =
    (CompletedFiltration (CanonicalFiltration I).toOurFiltration).N 1 := by
  sorry

omit [IsNoetherianRing A] in
lemma am10_15_ii (n : ℕ) : (I.adicCompletion I)^n = I.adicCompletion (I^n) := (I.map_pow (algebraMap A (AdicCompletion I A)) n).symm

lemma am10_15_ii_option_2 (n : ℕ) :
  ((I.adicCompletion I)^n).toAddSubgroup =
    (CompletedFiltration (CanonicalFiltration I).toOurFiltration).N n := by
  have : (I.adicCompletion I)^n = I.adicCompletion (I^n) := (I.map_pow (algebraMap A (AdicCompletion I A)) n).symm
  rw [this]
  sorry

lemma am10_15_ii_option_3 (n : ℕ) :
  ((CanonicalFiltration (I.adicCompletion I)).N n).toAddSubgroup =
    (CompletedFiltration (CanonicalFiltration I).toOurFiltration).N n := by
  sorry

section

variable {M : Type v} [AddCommGroup M] [Module A M]

/--
  The `I`-adic completion of a ring `A` is `Î`-adic complete.
-/
instance [IsNoetherianRing A] : IsAdicComplete (I.adicCompletion I) (AdicCompletion I A) := by
  rw [isComplete_iff_isCanonicalOurComplete]
  have := am10_5₂ (I.stableFiltration (⊤ : Submodule A A)).toOurFiltration
  convert this
  ext n x
  rw [←am10_15_ii_option_3]
  rfl

end

lemma mem_canonical_n_iff_mem_completed_canonical_n (n : ℕ) (x : A) :
  x ∈ (CanonicalFiltration I).N n ↔
    (OurFiltrationCompletion.of (CanonicalFiltration I).toOurFiltration) x ∈ (CanonicalFiltration (I.adicCompletion I)).N n := by
  show _ ∈ (CanonicalFiltration I).toOurFiltration.N n ↔ _ ∈ ((CanonicalFiltration (I.adicCompletion I)).N n).toAddSubgroup
  rw [am10_15_ii_option_3]
  rw [mem_n_iff_completion_mem_n]

def am10_15_iii_aux₁ (n : ℕ) :
    (CanonicalFiltration I).N n →+ (CanonicalFiltration (I.adicCompletion I)).N n where
  toFun := by
    intro ⟨x, hx⟩
    exact ⟨OurFiltrationCompletion.of (CanonicalFiltration I).toOurFiltration x,
      (mem_canonical_n_iff_mem_completed_canonical_n I n x).mp hx⟩
  map_zero' := by simp
  map_add' := by simp

noncomputable def am10_15_iii_aux₂ (n : ℕ) :
    GradedRingPiece I n →+ GradedRingPiece (I.adicCompletion I) n :=
  QuotientAddGroup.map _ _ (am10_15_iii_aux₁ I n) (by
      intro ⟨x, hx⟩ h
      exact (mem_canonical_n_iff_mem_completed_canonical_n I (n+1) x).mp h
    )

lemma am10_15_iii_aux₂_apply (n : ℕ) (x : (CanonicalFiltration I).N n) :
  am10_15_iii_aux₂ I n ⟦x⟧ = ⟦⟨OurFiltrationCompletion.of (CanonicalFiltration I).toOurFiltration x.1, (mem_canonical_n_iff_mem_completed_canonical_n I n x.1).mp x.2⟩⟧ := rfl

/-
  Note: this can probably be proven in a nicer way, as we have a commutative diagram
  0 -> Iⁿ/Iⁿ⁺¹ → A/Iⁿ⁺¹ → A/Iⁿ → 0
         |        |        |
  0 -> Iⁿ/Iⁿ⁺¹ → A/Iⁿ⁺¹ → A/Iⁿ → 0
  and the middle and right vertical maps are isos, and so the left one must be as well.
-/
noncomputable def am10_15_iii (n : ℕ) :
    GradedRingPiece I n ≃+ GradedRingPiece (I.adicCompletion I) n :=
  AddEquiv.ofBijective (am10_15_iii_aux₂ I n) (by
    constructor
    · apply (injective_iff_map_eq_zero (am10_15_iii_aux₂ I n)).mpr
      rintro ⟨a, ha⟩ h
      apply (QuotientAddGroup.eq_zero_iff _).mpr
      apply (mem_canonical_n_iff_mem_completed_canonical_n _ _ _).mpr
      show (OurFiltrationCompletion.of (CanonicalFiltration I).toOurFiltration a) ∈ (CanonicalFiltration (I.adicCompletion I)).N (n + 1)
      exact (QuotientAddGroup.eq_zero_iff _).mp h
    · rintro ⟨x, hx⟩
      have := (am10_4 (CanonicalFiltration I).toOurFiltration (n+1)).surjective
      rcases (this x) with ⟨y, h⟩
      have : y.out ∈ (CanonicalFiltration I).N n
      · rw [mem_canonical_n_iff_mem_completed_canonical_n]
        apply (Submodule.sub_mem_iff_left _ hx).mp
        apply (CanonicalFiltration (I.adicCompletion I)).mono n
        show _ ∈ ((CanonicalFiltration (I.adicCompletion I)).N (n+1)).toAddSubgroup
        rw [am10_15_ii_option_3]
        apply QuotientAddGroup.eq_iff_sub_mem.mp
        rw [←Quotient.out_eq y] at h
        rw [am10_4_apply] at h
        exact h
      use ⟦⟨y.out, this⟩⟧ₘ
      rw [←Quotient.out_eq y] at h
      rw [am10_4_apply] at h
      rw [am10_15_iii_aux₂_apply]
      show QuotientAddGroup.mk _ = QuotientAddGroup.mk _
      refine QuotientAddGroup.eq_iff_sub_mem.mpr ?_
      show _ - x ∈ ((CanonicalFiltration (I.adicCompletion I)).N (n + 1)).toAddSubgroup
      rw [am10_15_ii_option_3]
      rw [←QuotientAddGroup.eq_iff_sub_mem]
      exact h
  )

lemma am10_15_iii_commute (m n : ℕ) (x : GradedRingPiece I m) (y : GradedRingPiece I n) :
    am10_15_iii I (m + n) (graded_mul x y) = graded_mul (am10_15_iii I m x) (am10_15_iii I n y) := by
  rcases x with ⟨x, hx⟩
  rcases y with ⟨y, hy⟩
  rfl

lemma am10_15_iv : (I.adicCompletion I) ≤ (⊥ : Ideal (AdicCompletion I A)).jacobson :=
  IsAdicComplete.le_jacobson_bot (I.adicCompletion I)
