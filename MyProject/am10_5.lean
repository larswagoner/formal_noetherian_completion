import MyProject.am10_4
import MyProject.Completion.IsOurFiltrationComplete
import MyProject.adic_completion

/-
  # Proposition 10.5
  Let `G` be a topological abelian group.
  Then `Ĝ̂ ≅ Ĝ`.
-/

section

variable {G : Type u} [AddCommGroup G] (F : OurFiltration G)

lemma am10_5 : Function.Bijective
  (OurFiltrationCompletion.of (CompletedFiltration F)) := sorry

lemma am10_5' : IsOurFiltrationComplete (CompletedFiltration F) := by
  rw [IsOurFiltrationComplete_iff_Bijective]
  exact am10_5 F

end

section

variable {A : Type u} [CommRing A] (I : Ideal A)

/--
  Important lemma: define two subgroups `G₁`, `G₂` of `Â` by:
  (1) Let `G₁ ⊆ Â` be the ideal generated by the image of the composition `I → A → Â`.
  (2) Let `G₂ ⊆ Â` be the image of the composition `I → Î → Â`, where the first map is the completion map.
  Then `G₁ = G₂`.
-/
lemma aux₁ (n : ℕ) : ((I.adicCompletion I)^n).toAddSubgroup =
  (AddSubgroupCompletion ((I.stableFiltration ⊤).toOurFiltration.N n) (I.stableFiltration (⊤ : Submodule A A)).toOurFiltration) := sorry

instance : IsAdicComplete (I.adicCompletion I) (AdicCompletion I A) := by
  rw [isComplete_iff_isCanonicalOurComplete]
  have := am10_5' (I.stableFiltration (⊤ : Submodule A A)).toOurFiltration
  convert this
  ext n x
  unfold CompletedFiltration
  simp
  rw [←aux₁ I n]
  dsimp [Ideal.stableFiltration, Ideal.Filtration.toOurFiltration]
  simp

end
